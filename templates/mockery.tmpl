// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: mockio
{{ $root := . }}

package {{.PkgName}}

import (
{{- range .Imports}}
	{{ .ImportStatement }}
{{- end}}
    mockio_matchers "github.com/ovechkin-dm/mockio/v2/matchers"
    "reflect"
)

{{/* CREATE CONSTRUCTOR */}}

{{- range $i, $mock := .Interfaces }} {{/* START MOCK RANGE */}}
{{ $new := "New" }}
{{ if firstIsLower .StructName }}
{{ $new = "new" }}
{{- end }}
{{- $constructorName := printf "%s%s" $new (.StructName | firstUpper) }}

func {{ $constructorName }}{{ $mock.TypeConstraint }} (ctrl *mockio_matchers.MockController) {{ $root.SrcPkgQualifier }}{{ $mock.Name }}{{ $mock.TypeInstantiation }} {
    tp := reflect.TypeOf(new({{ $root.SrcPkgQualifier }}{{ $mock.Name }}{{ $mock.TypeInstantiation }})).Elem()
    handler := ctrl.MockFactory.BuildHandler(ctrl.Env, tp)
    methodsMap :=  make(map[string]reflect.Method)
	for i := 0; i < tp.NumMethod(); i++ {
		method := tp.Method(i)
		methodsMap[method.Name] = method
	}
	mock := &{{ .StructName }}{{ $mock.TypeInstantiation }}{
        _handler: handler,
        _methodsMap: methodsMap,
    }
    
	return mock
}


// {{ .StructName }} is an autogenerated mock type for the {{ .Name }} type
type {{ .StructName }}{{ $mock.TypeConstraint }} struct {
	_handler mockio_matchers.Handler
    _methodsMap map[string]reflect.Method
}

{{/* RANGE OVER ALL METHODS */}}
{{- range $methodIdx, $method := .Methods }} {{/* START METHOD RANGE */}}

// {{ $method.Name }} provides a mock function for the type {{ $mock.StructName }}
func (_mock *{{$mock.StructName}}{{ $mock.TypeInstantiation }}) {{$method.Name}}({{$method.ArgList}}) {{$method.ReturnArgTypeList}} {
    _methodType := _mock._methodsMap["{{$method.Name}}"]

    _args := []reflect.Value {
        {{- range $paramIdx, $param := $method.Params }}
            reflect.ValueOf({{ $param.Name }}),
        {{- end }}
    }	

    {{- if ne (len $method.Returns) 0}}    
    outs := _mock._handler.Handle(_methodType, _args)

    {{- range $paramIdx, $param := $method.Returns }}
        r{{$paramIdx}}, _ := outs[{{$paramIdx}}].Interface().({{ $param.TypeString }})
    {{- end }}
    
	return {{ range $retIdx, $ret := $method.Returns }}r{{ $retIdx }}{{ if ne $retIdx (len $method.Returns | add -1) }}, {{ end }}{{ end }}
    {{- else }}
        _ = _mock._handler.Handle(_methodType, _args)
    {{- end }}
}



{{- end }} {{/* END METHOD RANGE */}}
{{- end }} {{/* END MOCK RANGE */}}