// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: mockio
{{ $root := . }}

package {{.PkgName}}

{{- $matchersPackage := $root.Registry.AddImport "matchers" "github.com/ovechkin-dm/mockio/v2/matchers" }}
{{- $reflectPackage := $root.Registry.AddImport "reflect" "reflect" }}

import (
{{- range $_, $import := $root.Imports}}
	{{ $import.ImportStatement }}
{{- end}}    
)

{{/* CREATE CONSTRUCTOR */}}

{{- range $i, $mock := .Interfaces }} {{/* START MOCK RANGE */}}
{{ $new := "New" }}
{{ if firstIsLower .StructName }}
{{ $new = "new" }}
{{- end }}
{{- $constructorName := printf "%s%s" $new (.StructName | firstUpper) }}
{{- with $constructorScope := $root.Registry.MethodScope }} {{/* START CONSTRUCTOR */}}
{{- $ctrlVar := $constructorScope.AllocateName "ctrl" }}
{{- $tpVar := $constructorScope.AllocateName "tp" }}
{{- $handlerVar := $constructorScope.AllocateName "handler" }}
{{- $methodsMapVar := $constructorScope.AllocateName "methodsMap" }}
{{- $iVar := $constructorScope.AllocateName "i" }}
{{- $methodVar := $constructorScope.AllocateName "method" }}
{{- $mockVar := $constructorScope.AllocateName "mockVar" }}


func {{ $constructorName }}{{ $mock.TypeConstraint }} ({{ $ctrlVar }} *{{ $matchersPackage.Qualifier }}.MockController) {{ $root.SrcPkgQualifier }}{{ $mock.Name }}{{ $mock.TypeInstantiation }} {
    {{ $tpVar }} := {{ $reflectPackage.Qualifier }}.TypeOf(new({{ $root.SrcPkgQualifier }}{{ $mock.Name }}{{ $mock.TypeInstantiation }})).Elem()        
    {{ $handlerVar }} := {{ $ctrlVar }}.MockFactory.BuildHandler(ctrl.Env, tp)
    {{ $methodsMapVar }} :=  make(map[string]{{ $reflectPackage.Qualifier }}.Method)
	for {{ $iVar }} := 0; {{ $iVar }} < {{ $tpVar }}.NumMethod(); {{ $iVar }}++ {
		{{ $methodVar }} := {{ $tpVar }}.Method({{ $iVar }})
		{{ $methodsMapVar }}[{{ $methodVar }}.Name] = {{ $methodVar }}
	}
	{{ $mockVar }} := &{{ $mock.StructName }}{{ $mock.TypeInstantiation }}{
        _handler: handler,
        _methodsMap: methodsMap,
    }
    
	return {{ $mockVar }}
}

{{- end }} {{/* END CONSTRUCTOR */}}


// {{ $mock.StructName }} is an autogenerated mock type for the {{ $mock.Name }} type
type {{ $mock.StructName }}{{ $mock.TypeConstraint }} struct {
	_handler {{ $matchersPackage.Qualifier }}.Handler
    _methodsMap map[string]{{ $reflectPackage.Qualifier }}.Method
}

{{- with $handlerMethodScope := $root.Registry.MethodScope }} {{/* START HANDLER METHOD */}}
{{- $structHandlerMethodVar := $handlerMethodScope.AllocateName "mock" }}
func ({{ $structHandlerMethodVar }} *{{$mock.StructName}}{{ $mock.TypeInstantiation }}) Handler() {{ $matchersPackage.Qualifier }}.Handler {
    return {{ $structHandlerMethodVar }}._handler
}
{{- end }} {{/* END HANDLER METHOD */}}

{{/* RANGE OVER ALL METHODS */}}
{{- range $methodIdx, $method := .Methods }} {{/* START METHOD RANGE */}}

// {{ $method.Name }} provides a mock function for the type {{ $mock.StructName }}
{{- $structVar := $method.Scope.AllocateName "mock" }}
func ({{ $structVar }} *{{$mock.StructName}}{{ $mock.TypeInstantiation }}) {{$method.Name}}({{$method.ArgList}}) {{$method.ReturnArgTypeList}} {
    {{- $methodTypeVar := $method.Scope.AllocateName "methodType" }}
    {{- $argsVar := $method.Scope.AllocateName "args" }}
    {{- $outsVar := $method.Scope.AllocateName "outs" }}
    {{- $methodTypeVar }} := {{ $structVar }}._methodsMap["{{$method.Name}}"]
    {{ $argsVar }} := []{{ $reflectPackage.Qualifier }}.Value {
        {{- range $paramIdx, $param := $method.Params }}
            {{ $reflectPackage.Qualifier }}.ValueOf({{ $param.Name }}),
        {{- end }}
    }	

    {{- if ne (len $method.Returns) 0}}    
    outs := {{ $structVar }}._handler.Handle({{ $methodTypeVar }}, {{ $argsVar }})

    {{- range $paramIdx, $param := $method.Returns }}
        {{- $retVarRaw := printf "r%d" $paramIdx }}
        {{- $retVar := $method.Scope.SuggestName $retVarRaw }}
        {{ $retVar }}, _ := outs[{{$paramIdx}}].Interface().({{ $param.TypeString }})
    {{- end }}
    
	return {{ range $retIdx, $ret := $method.Returns }}{{- $retVarRaw := printf "r%d" $retIdx }}{{- $retVar := $method.Scope.SuggestName $retVarRaw }} {{ $retVar }} {{ if ne $retIdx (len $method.Returns | add -1) }}, {{ end }}{{ end }}
    {{- else }}
        _ = {{ $structVar }}._handler.Handle({{ $methodTypeVar }}, {{ $argsVar }})
    {{- end }}
}

{{- end }} {{/* END METHOD RANGE */}}
{{- end }} {{/* END MOCK RANGE */}}